/*
 * Matrix Routing OSM
 * With the Matrix Routing OSM service you can compute distances and travel times between a set of origins and destinations based on open street map data.
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.matrixrouting.osm.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.matrixrouting.osm.ApiClient;
/**
 * Options
 */
@JsonPropertyOrder({
  Options.JSON_PROPERTY_DETOUR_FACTOR,
  Options.JSON_PROPERTY_AVERAGE_SPEED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-04T13:14:13.711081255Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class Options {
  public static final String JSON_PROPERTY_DETOUR_FACTOR = "detourFactor";
  private JsonNullable<Double> detourFactor = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_AVERAGE_SPEED = "averageSpeed";
  private JsonNullable<Double> averageSpeed = JsonNullable.<Double>undefined();

  public Options() { 
  }

  public Options detourFactor(Double detourFactor) {
    this.detourFactor = JsonNullable.<Double>of(detourFactor);
    return this;
  }

  /**
   * Defines the average detour an actual route on the road requires, compared to the direct distance. This factor is used to estimate by direct distance a relation that could not be calculated using the road network. If not specified, the factor is selected based on the profile.
   * minimum: 1
   * @return detourFactor
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Double getDetourFactor() {
        return detourFactor.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DETOUR_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getDetourFactor_JsonNullable() {
    return detourFactor;
  }
  
  @JsonProperty(JSON_PROPERTY_DETOUR_FACTOR)
  public void setDetourFactor_JsonNullable(JsonNullable<Double> detourFactor) {
    this.detourFactor = detourFactor;
  }

  public void setDetourFactor(Double detourFactor) {
    this.detourFactor = JsonNullable.<Double>of(detourFactor);
  }


  public Options averageSpeed(Double averageSpeed) {
    this.averageSpeed = JsonNullable.<Double>of(averageSpeed);
    return this;
  }

  /**
   * Defines the average speed of the vehicle. This parameter is used to calculate the travel time for a relation that could not be calculated using the road network. If not specified, the average speed is selected based on the profile.
   * minimum: 1
   * @return averageSpeed
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Double getAverageSpeed() {
        return averageSpeed.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AVERAGE_SPEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getAverageSpeed_JsonNullable() {
    return averageSpeed;
  }
  
  @JsonProperty(JSON_PROPERTY_AVERAGE_SPEED)
  public void setAverageSpeed_JsonNullable(JsonNullable<Double> averageSpeed) {
    this.averageSpeed = averageSpeed;
  }

  public void setAverageSpeed(Double averageSpeed) {
    this.averageSpeed = JsonNullable.<Double>of(averageSpeed);
  }


  /**
   * Return true if this Options object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Options options = (Options) o;
    return equalsNullable(this.detourFactor, options.detourFactor) &&
        equalsNullable(this.averageSpeed, options.averageSpeed);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(detourFactor), hashCodeNullable(averageSpeed));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Options {\n");
    sb.append("    detourFactor: ").append(toIndentedString(detourFactor)).append("\n");
    sb.append("    averageSpeed: ").append(toIndentedString(averageSpeed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `detourFactor` to the URL query string
    if (getDetourFactor() != null) {
      joiner.add(String.format("%sdetourFactor%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDetourFactor()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `averageSpeed` to the URL query string
    if (getAverageSpeed() != null) {
      joiner.add(String.format("%saverageSpeed%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAverageSpeed()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

